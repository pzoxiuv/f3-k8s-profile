diff --git a/client-server/src/server/server.go b/client-server/src/server/server.go
index d34d6d9..77f9be0 100755
--- a/client-server/src/server/server.go
+++ b/client-server/src/server/server.go
@@ -3,12 +3,13 @@ package main
 import (
 	"flag"
 	"bufio"
+	"encoding/binary"
 	"net"
 	"os"
 	"path"
 	"io"
-	"strconv"
 	log "github.com/sirupsen/logrus"
+	"fmt"
 )
 
 const(
@@ -23,11 +24,11 @@ func main(){
 	listen_port := flag.String("listen-port", "9999", "string")
 	temp_dir := flag.String("temp-dir", "./tempdir","string")
 	flag.Parse()
-
+	
 	log.WithFields(log.Fields{"thread": "server.main",}).Trace("listen_add: "+ *listen_add)
 	log.WithFields(log.Fields{"thread": "server.main",}).Trace("listen_port: "+ *listen_port)
 	log.WithFields(log.Fields{"thread": "server.main",}).Trace("temp_dir: "+ *temp_dir)
-
+	
 	run_remote_server(*listen_add, *listen_port, *temp_dir)
 }
 
@@ -39,7 +40,7 @@ func run_remote_server(listen_address string, listen_port string, temp_dir strin
 		os.Exit(1)
 	}
 	defer l.Close()
-
+	
 	for{
 		conn, err := l.Accept()
 		if err != nil{
@@ -52,7 +53,7 @@ func run_remote_server(listen_address string, listen_port string, temp_dir strin
 }
 
 //receives client's file request, checks if it is present and sends resp. ack to the client
-//if file is present, firstly sends the file size and then the file
+//if file is present, firstly sends the file size and then the file 
 func handleConnection(conn net.Conn, temp_dir string){
 	buffer, err := bufio.NewReader(conn).ReadBytes('\n')
 	clientAddress := conn.RemoteAddr().String()
@@ -67,27 +68,24 @@ func handleConnection(conn net.Conn, temp_dir string){
 	fname := path.Join(temp_dir, message)
 	log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname,"clientAddress":clientAddress,}).Info("Got download request for file: " + fname)
 	file, err := os.Open(fname)
-	var msg string
 	if err != nil {
-		msg = "NACK"
+		binary.Write(conn, binary.LittleEndian, false)
 		log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname, "clientAddress": clientAddress,}).Info(err)
-		conn.Write([]byte(msg))
 		return
 	}
 	fileInfo, err := file.Stat()
 	if err != nil {
-		msg = "NACK"
+		binary.Write(conn, binary.LittleEndian, false)
 		log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname, "clientAddress": clientAddress,}).Info(err)
-		conn.Write([]byte(msg))
 		return
 	}
-	msg = fillString("ACK",4)
-	conn.Write([]byte(msg))
-	
-	fileSize := fillString(strconv.FormatInt(fileInfo.Size(), 10), 40)
-	log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname, "fileSize": fileInfo.Size(), "clientAddress": clientAddress,}).Info("Sending filesize: "+fileSize)
+	binary.Write(conn, binary.LittleEndian, true)
 	
-	conn.Write([]byte(fileSize))
+	err = binary.Write(conn, binary.LittleEndian, fileInfo.Size())
+	if err != nil{
+		log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname, "clientAddress": clientAddress,}).Error(err)
+	}
+	log.WithFields(log.Fields{"thread": "server.handleConnection","filename": fname, "fileSize": fileInfo.Size(), "clientAddress": clientAddress,}).Trace("Sending filesize: "+fmt.Sprint(fileInfo.Size()))
 	
 	sendBuffer := make([]byte, BUFFERSIZE)
 	for {
