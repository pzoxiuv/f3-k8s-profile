F3 non ID, without nocache and without nosplice, 4 MB buffers everywhere (client/server, reader, writer).
kubes1 writer, kubes3 reader:
writes: 6 6 6 5
reads: 38 39 40 41

F3 ID, without nocache and without nosplice, 4 MB buffers everywhere (client/server, reader, writer).
kubes1 writer, kubes3 reader:
writes: 6 6 6 5
reads: 38 39 40 41

>>>>>>> ID did not work: file downloaded correctly but stat on kubes3 still
reported empty file.  Caching related?  Trying again *with* nocache

>>>>>>> Adding nocache worked.  In sfs_getattr the fuse_reply_attr passes the
fs.timeout value, so maybe clearing that would prevent the size from being
cached?

See http://fuse.996288.n3.nabble.com/fuse-file-info-keep-cache-usage-guidelines-td5130.html

New times for F3 ID, *with* nocache *without* nosplice, 4 MB buffers:
writes: 9 9 8 9
reads: 37 40 41 40

OK, now the non ID case isn't working...
>>>> actually was writing to a file just called "id", not sure why that caused weirdness?
>>>> nope, still not working with correct filenames.  On kubes1 we see the
1,2,3,4 files are 2 GB in /var/cephfs/microbench/ but on kubes3 they're zero
size.  Not sure how that happens?  This should be totally independent of F3,
we're not looking at /var/data/...
Might actually be this: https://bugzilla.redhat.com/show_bug.cgi?id=1710751
-> upgrading to kernel 3.10.1160 seems to have fixed it.

New numbers, *with* nocache *without* nosplice:

F3 ID:
write: 7 7 8 7
read: 41 39 40 42
(open/read split: 32/8, 29/8, 30/8, 31/9)

F3 non ID:
write: 8 8 6 6
read: 43 41 40 39

Ceph (no F3):
write: 3 2 3 2
read: 24 24 14 15

====

Could try removing nocache again, since it seems like the original issue might
have been with the splicing.

Even so, only read a few seconds faster.  Why is downloading so slow?  No
reason that should be so much slower than the cephfs case.  The results now
show downloading rate is around 66 MB/s - should be way faster.

===

"Faster" downloading?
Non ID:
writes: 8 10 9 8
reads: 42 15 40 41

ID:
writes: 8 8 9 9
reads: 32 34 43 34
(open/read split): 23/8 24/8 33/9 24/8

===
===
===

With new reads:

ID:
writes: 13 13 11 10 9
reads: 30 34 30 30 32

===

New version:

write: 5 5 6 6 5 5 5 6 5 5
read: 25 28 24 23 30 17 16 20 14 18

===

8/6:

out-e2e-4-5000m has all ceph-related ones, after updates to ceph (just one OSD, liveness probe changes on the mon)
out-e2e-5000m has minio and nfs
out-e2e-4-5000m also has nfs

out-stream-2-5000m has all streaming times?

